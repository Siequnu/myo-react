{"version":3,"sources":["helpers/auth-header.js","helpers/handle-response.js","config.js","services/authentication.service.js","services/axios-fetcher.service.js","components/Auth/PrivateRoute.jsx","components/Auth/Login.jsx","components/Auth/ResetWithToken.jsx","components/Auth/Reset.jsx","Navbar/Navbar.jsx","components/TopBar/TopBar.jsx","components/SplashScreen/SplashScreen.jsx","components/UserMenu/UserMenu.jsx","components/Card/CardComponent.jsx","components/Onboarding/Onboarding.jsx","components/Hero/Hero.jsx","components/HeroList/ActivityAvatarList.jsx","components/HeroList/HeroList.jsx","components/ViewActivities/ViewActivitiesComponent.jsx","components/Activity/ActivityIntroduction.jsx","components/Activity/ActivityCarousel.jsx","components/Activity/Activity.jsx","components/Spark/ActivityBubble.jsx","components/Spark/Spark.jsx","App.js","serviceWorker.js","interceptors/axios-interceptor.js","index.js"],"names":["accessToken","currentUser","authenticationService","currentUserValue","access_token","refreshToken","refresh_token","handleResponse","response","text","then","data","JSON","parse","ok","indexOf","status","logout","error","message","statusText","Promise","reject","config","authLogin","authRefresh","afterLogout","resetWithToken","currentUserSubject","BehaviorSubject","localStorage","getItem","login","removeItem","next","updateUser","userObject","setItem","stringify","asObservable","value","username","password","a","requestOptions","method","headers","body","fetch","user","PrivateRoute","Component","component","rest","render","props","to","pathname","state","from","location","withRouter","setSnackbar","React","useContext","SnackbarContext","history","push","formik","useFormik","initialValues","onSubmit","values","open","severity","className","handleSubmit","TextField","fullWidth","id","name","label","onChange","handleChange","touched","Boolean","errors","type","helperText","Button","color","variant","Link","token","useParams","json","hasOwnProperty","success","catch","email","SimpleBottomNavigation","useState","setValue","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","icon","TopBar","RouterLink","src","alt","fontSize","SplashScreen","UserMenu","CardComponent","activities","map","card","i","activityId","thumbnail","title","description","style","textDecoration","Onboarding","handleClose","setState","isVisible","story","intro","children","attachToId","this","onClose","Hero","activity","pop","backgroundImage","ActivityAvatarList","Grid","item","List","dense","ListItem","ListItemAvatar","Avatar","itemId","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","edge","Divider","HeroList","half","Math","ceil","length","firstHalf","splice","secondHalf","ViewActivitiesComponent","bounceLoaderCss","css","useSWR","loading","size","setActivities","getRandomActivities","count","Array","floor","random","ActivityIntroduction","split","autoPlay","muted","loop","playsInline","controls","dangerouslySetInnerHTML","__html","onClick","handleStartActivity","ActivityCarousel","activityCompleted","setActivityCompleted","spaceBetween","slidesPerView","navigation","pagination","clickable","onReachEnd","pages","page","encodeURI","Activity","showActivityIntroduction","setShowActivityIntroduction","override","SwiperCore","use","Navigation","Pagination","A11y","ActivityBubble","getActivityId","thumbnailUrl","backgroundColor","backgroundColour","opacity","bubbleSize","transition","Spark","options","minSize","gutter","provideProps","numCols","fringeWidth","yRadius","xRadius","cornerRadius","showGuides","compact","gravitation","background_colour","createContext","App","splashScreen","setSplashScreen","useEffect","setTimeout","theme","createMuiTheme","palette","useMediaQuery","main","typography","fontFamily","join","snackbar","ThemeProvider","CssBaseline","rel","href","Provider","Snackbar","autoHideDuration","exact","path","Login","Reset","ResetWithToken","window","hostname","match","axios","interceptors","resolve","originalRequest","refreshTokenString","__isRetryRequest","_retry","refresh","res","reload","ReactDOM","fetcher","url","get","Authorization","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16afdd64.chunk.js","sourcesContent":["import { authenticationService } from '../services';\n\nexport function authHeader() {\n    // Return authorization header with jwt token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.access_token) {\n        return { Authorization: `Bearer ${currentUser.access_token}` };\n    } else {\n        return {};\n    }\n}\n\nexport function refreshHeader() {\n    // Return authorization header with jwt token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.refresh_token) {\n        return { Authorization: `Bearer ${currentUser.refresh_token}` };\n    } else {\n        return {};\n    }\n}\n\nexport function accessToken() {\n    // Return jwt token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.access_token) {\n        return currentUser.access_token;\n    } else {\n        return {};\n    }\n}\n\nexport function refreshToken() {\n    // Return jwt refresh token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.refresh_token) {\n        return currentUser.refresh_token;\n    } else {\n        return false;\n    }\n}","import { authenticationService } from '../services';\n\n// Handle Sign-in response\nexport function handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if ([401, 403].indexOf(response.status) !== -1) {\n                // Auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n                authenticationService.logout();\n                //window.location.reload();\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}","const config = \n{\n    authLogin: '/auth/login',\n    authRefresh: '/auth/refresh',\n    afterLogout: '/',\n    resetWithToken: '/auth/reset/token'\n}\n\nexport default config","import { BehaviorSubject } from 'rxjs';\nimport { handleResponse } from '../helpers';\nimport config from '../config';\n\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n\nexport const authenticationService = {\n    login,\n    logout,\n    updateUser,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue() { return currentUserSubject.value }\n};\n\nasync function login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    const response = await fetch(config.authLogin, requestOptions);\n    const user = await handleResponse(response);\n\n    // Store user details and JWT token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('currentUser', JSON.stringify(user));\n    currentUserSubject.next(user);\n    return user;\n}\n\nfunction updateUser(userObject) {\n    localStorage.setItem('currentUser', JSON.stringify(userObject));\n    currentUserSubject.next(userObject);\n}\n\nfunction logout() {\n    // Remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n}\n","import axios from 'axios';\nimport { accessToken } from '../helpers';\n\n// Automatically include token with fetcher\nexport const fetcher = (url) =>\n  axios\n    .get(url, { headers: { Authorization: \"Bearer \" + accessToken() } })\n    .then((res) => res.data);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { authenticationService } from '../../services';\r\n\r\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={props => {\r\n        const currentUser = authenticationService.currentUserValue;\r\n        if (!currentUser) {\r\n            // Not logged in so redirect to login page with the return url\r\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n        }\r\n\r\n        // Authorised so return component\r\n        return <Component {...props} />\r\n    }} />\r\n)","import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\nimport './Auth.css';\n\nimport { useFormik } from 'formik';\nimport { Button, TextField } from '@material-ui/core';\nimport { authenticationService } from '../../services';\n\nimport { SnackbarContext } from '../../App';\n\nfunction Login(props) {\n\n    const { setSnackbar } = React.useContext(SnackbarContext);\n    \n    if (authenticationService.currentUserValue) {\n        props.history.push('/');\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            username: '',\n            password: '',\n        },\n        onSubmit: (values) => {\n            authenticationService.login(values.username, values.password)\n                .then(\n                    (user) => {\n                        const { from } = props.location.state || { from: { pathname: \"/\" } };\n                        props.history.push(from);\n\n                        setSnackbar({\n                            text: `Welcome, ${values.username}`,\n                            open: true,\n                            severity: 'success'\n                        })\n                    }\n                );\n        },\n    });\n\n    return (\n        <div className=\"AuthForm\">\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                    fullWidth\n                    id=\"username\"\n                    name=\"username\"\n                    label=\"Username\"\n                    value={formik.values.username}\n                    onChange={formik.handleChange}\n                    error={formik.touched.username && Boolean(formik.errors.username)}\n                />\n                <TextField\n                    fullWidth\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    value={formik.values.password}\n                    onChange={formik.handleChange}\n                    error={formik.touched.password && Boolean(formik.errors.password)}\n                    helperText={formik.touched.password && formik.errors.password}\n                />\n                <Button className=\"SubmitButton\" color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n                    Submit\n                </Button>\n                <Button component={Link} to=\"/reset\" className=\"ResetPasswordButton\">\n                    Forgot password\n                </Button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(Login);","import React from 'react';\nimport { withRouter, useParams } from 'react-router-dom';\n\nimport { useFormik } from 'formik';\n\nimport { Button, TextField } from '@material-ui/core';\n\nimport './Auth.css';\n\nimport { SnackbarContext } from '../../App';\n\nimport config from '../../config';\n\nfunction ResetWithToken(props) {\n\n    const { setSnackbar } = React.useContext(SnackbarContext);\n\n    const { token } = useParams();\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n        },\n        //validationSchema: validationSchema,\n        onSubmit: (values) => {\n            // Add in the token\n            values.token = token;\n\n            // Fetch the data\n            fetch(config.resetWithToken, {\n                method: 'POST',\n                body: JSON.stringify(values),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.hasOwnProperty('error')) {\n                        throw data.error;\n                    }\n                    setSnackbar({\n                        text: data.success,\n                        open: true,\n                        severity: 'success'\n                    })\n                    \n                    // Show the login screen\n                    props.history.push('/login');\n                })\n                .catch(function (error) {\n                    setSnackbar({\n                        text: error,\n                        open: true,\n                        severity: 'error'\n                    })\n                })\n        },\n    });\n\n    // Display a password reset form\n    return (\n        <div className=\"AuthForm\">\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                    fullWidth\n                    id=\"password\"\n                    name=\"password\"\n                    label=\"New password\"\n                    type=\"password\"\n                    value={formik.values.password}\n                    onChange={formik.handleChange}\n                    error={formik.touched.password && Boolean(formik.errors.password)}\n                    helperText={formik.touched.password && formik.errors.password}\n                />\n                <Button variant=\"contained\" fullWidth type=\"submit\">\n                    Set new password\n                </Button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(ResetWithToken)","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport { useFormik } from 'formik';\n\nimport { Button, TextField } from '@material-ui/core';\n\nimport { SnackbarContext } from '../../App';\n\nfunction Reset(props) {\n\n    const { setSnackbar } = React.useContext(SnackbarContext);\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        onSubmit: (values) => {\n            fetch('/auth/reset', {\n                method: 'POST',\n                body: JSON.stringify(values),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.hasOwnProperty('error')) {\n                        throw data.error;\n                    }\n                    \n                    setSnackbar({\n                        text: data.success,\n                        open: true,\n                        severity: 'success'\n                    })\n\n                    props.history.push('login');\n                    \n                })\n                .catch(function (error) {\n                    \n                    setSnackbar({\n                        text: error,\n                        open: true,\n                        severity: 'error'\n                    })\n\n                })\n        },\n    });\n\n    // Display an email form, to which reset email can be sent\n    return (\n        <div className=\"AuthForm\">\n            <form onSubmit={formik.handleSubmit}>\n                <TextField\n                    fullWidth\n                    id=\"email\"\n                    name=\"email\"\n                    label=\"Email\"\n                    type=\"email\"\n                    value={formik.values.email}\n                    onChange={formik.handleChange}\n                    error={formik.touched.email && Boolean(formik.errors.email)}\n                    helperText={formik.touched.email && formik.errors.email}\n                />\n\n                <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n                    Send password reset email\n                </Button>\n\n                <Button component={Link} to=\"/login\">\n                    Back to Login\n                </Button>\n            </form>\n        </div>\n    )\n}\n\nexport default withRouter(Reset)","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Navbar.css';\n\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport FireplaceIcon from '@material-ui/icons/Fireplace';\n\n\nexport default function SimpleBottomNavigation() {\n    const [value, setValue] = React.useState(0);\n  \n    return (\n      <BottomNavigation\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        showLabels\n        className=\"navbar\"\n      >\n        <BottomNavigationAction component={Link} to=\"/\" id=\"HomeNavbarIcon\" label=\"Home\" icon={<HomeIcon />} />\n        <BottomNavigationAction component={Link} to=\"/spark\" id=\"SparkNavbarIcon\" label=\"Spark\" icon={<FireplaceIcon />} />\n      </BottomNavigation>\n    );\n  }\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@material-ui/core';\n\nimport './TopBar.css';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nclass TopBar extends React.Component {\n  \n  render() {\n      return (\n          <div className=\"TopBar\">\n            <Link component={RouterLink} to=\"/\" className=\"AccountLink\">\n              <img className=\"MyoLogo\" src=\"/assets/logo.png\" alt=\"Myo app logo\" />\n            </Link>\n            <img className=\"MyoText\" src=\"/assets/myo-text.png\" alt=\"Myo app logo\" />\n            <Link component={RouterLink} to=\"/user\" className=\"AccountLink\">\n              <AccountCircleIcon fontSize=\"large\" className=\"AccountCircle\" />\n            </Link>\n          </div>\n      )\n  }\n}\n\nexport default TopBar;","import React, { Suspense } from 'react';\nimport './SplashScreen.css';\n\nexport default function SplashScreen() {\n  return (\n    <div className=\"SplashScreen\">\n      <div className=\"SplashScreenWrapper\">\n        <Suspense>\n          <img src=\"/assets/myo-text-icon.png\" alt=\"Myo icon\" />\n          <p>Spark wonder</p>\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport './UserMenu.css';\n\nexport default function UserMenu() {\n\n    return (\n        <div className=\"UserMenu\">\n            <h1>Your account</h1>        \n        </div>\n    )\n}","import React from 'react';\nimport './CardComponent.css'\n\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@material-ui/core';\n\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nfunction CardComponent(props) {\n    \n    return (\n        <div className=\"cardComponent\">\n            {props.activities.map((card, i) => (\n                \n                <div className=\"card\" key={i}>\n                    \n                    <div className=\"card-image\">\n                        <img src={`/activities/${card.activityId}/${card.thumbnail}`} alt=\"Header decoration\" />\n                    </div>\n                    \n                    <div className=\"content\">\n                        <h4>{card.title}</h4>\n                        <p>{card.description}</p>\n                    </div>\n                    \n                    <Link component={RouterLink}\n                        to={{pathname: `/activity/${card.activityId}`}}\n                        className=\"read-more\"\n                        style={{ textDecoration: 'none' }}>\n                       <span>Start activity <ChevronRightIcon className=\"chevron-right\" /></span>\n                    </Link>\n\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default CardComponent;","import React from 'react';\n\nimport UserOnboarding from 'react-user-onboarding'\nimport 'react-user-onboarding/dist/index.css'\n\nclass Onboarding extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isVisible: (localStorage.getItem('onboardingComplete') === null)\n        }\n\n        this.story = [\n            {\n                component: 'modal',\n                intro: true,\n                children: (\n                    <p>Hey there! Welcome to Myo. As this is your first time, could we show you around?</p>\n                ),\n                className: 'introModal'\n            },\n            {\n                component: 'speech-bubble',\n                attachToId: 'HomeNavbarIcon',\n                children: (\n                    <p>This is the Home tab, where you can view all our activities, or you can click Spark, to start your custom creative journey.</p>\n                )\n            },\n            {\n                component: 'modal',\n                intro: false,\n                children: (\n                    <p>The main feature of Myo is a custom curated journey of creativity exercises, that adapts and matches what you need.</p>\n                )\n            },\n            {\n                component: 'modal',\n                intro: false,\n                children: (\n                    <p>We regularly add more exercises. Good luck with your creativity journey!</p>\n                )\n            }\n        ]\n    }\n\n    handleClose = () => {\n        localStorage.setItem('onboardingComplete', true);\n        this.setState({ isVisible: false })\n    }\n\n    render() {\n        return (\n            <UserOnboarding\n                story={this.story}\n                isVisible={this.state.isVisible}\n                onClose={this.handleClose}\n            />\n        )\n    }\n}\n\nexport default Onboarding;","import React from 'react';\nimport './Hero.css';\n\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@material-ui/core';\n\nexport default function Hero(props) {\n\n    const activity = props.activities.pop()\n\n    const thumbnail = `/activities/${activity.activityId}/${activity.thumbnail}`\n    const pathname = `/activity/${activity.activityId}`\n\n    return (\n        <div className=\"Hero\" style={{ backgroundImage: `url(\"${thumbnail}\"`}}>\n            <div className=\"HeroContent\" style={{'background': `linear-gradient(90deg, rgba(241,152,32,1) 35%, rgba(255,255,255,0) 64%)`}}>\n                <h1>{activity.title}</h1>\n                <p>{activity.description}</p>\n\n                <Link component={RouterLink}\n                    to={{\n                        pathname: pathname,\n                        state: { activityId: activity.activityId }\n                    }}\n                    className=\"HeroLink\"\n                    style={{ textDecoration: 'none' }}>\n                    <button className=\"HeroButton\" >Start now</button>\n                </Link>\n\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@material-ui/core';\n\nimport './ActivityAvatarList.css';\n\nexport default function ActivityAvatarList(props) {\n\n    const getThumbnail = (thumbnail, itemId) => `/activities/${itemId}/${thumbnail}`\n\n    return (\n        <Grid item>\n            <List dense={false}>\n                {props.activities.map((activity, i) => (\n                    <Link \n                        key={i} \n                        component={RouterLink}\n                        to={{ pathname: `/activity/${activity.activityId}` }}\n                        style={{ textDecoration: 'none', color: '#333' }}\n                    >\n                        <ListItem className=\"ListItem\" >\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <img src={getThumbnail(activity.thumbnail, activity.activityId)} alt=\"Activity illustration\" />\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={activity.title}\n                                secondary={activity.description}\n                            />\n                            <ListItemSecondaryAction>\n                                <IconButton edge=\"end\">\n                                    <NavigateNextIcon />\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        \n                        <Divider variant=\"inset\" component=\"li\" />\n                    </Link>\n                ))}\n            </List>\n        </Grid>\n    );\n}\n","import React from 'react';\nimport './HeroList.css';\n\nimport ActivityAvatarList from './ActivityAvatarList';\n\nexport default function HeroList(props) {\n    \n    // Split the array in half\n    const half = Math.ceil(props.activities.length / 2);    \n    const firstHalf = props.activities.splice(0, half)\n    const secondHalf = props.activities.splice(-half)\n\n    return (\n        <div className=\"HeroList\">\n            <h1>{props.title}</h1>\n            <div className=\"HeroListContent\">\n                <ActivityAvatarList className=\"ActivityAvatarList\" activities={firstHalf} />\n                <ActivityAvatarList className=\"ActivityAvatarList\" activities={secondHalf} />\n            </div>\n        </div>\n    )\n}","import React from \"react\"\nimport useSWR from 'swr'\nimport './ViewActivitiesComponent.css'\n\nimport { css } from \"@emotion/core\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nimport CardComponent from '../Card/CardComponent';\nimport Onboarding from '../Onboarding/Onboarding';\nimport Hero from '../Hero/Hero';\nimport HeroList from '../HeroList/HeroList';\n\nexport default function ViewActivitiesComponent() {\n\n    const bounceLoaderCss = css`display: block; margin: 0 auto;`;\n\n    const { data } = useSWR('/activities/api/list')\n\n    if (!data) return <BounceLoader color='#F19820' loading={true} css={bounceLoaderCss} size={100} />\n    \n    var activities\n    const setActivities = () => {\n        activities=[...data.activities]\n        activities.map((activity, i) => activities[i].activityId = i+1)\n    }\n    setActivities();\n\n\n    // Function to remove from the main array ${count} amount of items\n    const getRandomActivities = (count=false) => {\n        if (activities.length < 1) {setActivities()}\n\n        if (!count) {count = activities.length}\n        return [...Array(count)].map(() => activities.splice(Math.floor(Math.random() * activities.length), 1)[0]);\n    }\n    \n    return (\n        <div className=\"ViewActivitiesComponent\">\n            <Onboarding />\n            <Hero activities={getRandomActivities(1)}/>\n            <HeroList activities={getRandomActivities(4)} title=\"Activities we love right now\"/>\n            <CardComponent activities={getRandomActivities(3)} />\n            <Hero activities={getRandomActivities(1)}/>\n            <HeroList activities={getRandomActivities(4)} title=\"Trending this week\"/>\n            <CardComponent activities={getRandomActivities(6)} />\n            <Hero activities={getRandomActivities(1)}/>\n            <CardComponent activities={getRandomActivities(3)} />\n        </div>\n    )\n}","import React from \"react\";\nimport { Button } from '@material-ui/core';\n\nimport './ActivityIntroduction.css';\n\nexport default function ActivityIntroduction(props) {\n    return (\n        <div className=\"ActivityIntroduction\">\n            {(props.activity.thumbnail.split('.').pop() === 'mp4') ? (\n                <video className=\"ActivityVideo\" autoPlay muted loop playsInline controls >\n                    <source src={`/activities/${props.activityId}/${props.activity.thumbnail}`} type=\"video/mp4\" />\n                </video>\n            ) : (\n                <img src={'/activities/' + (props.activityId) + '/' + props.activity.thumbnail} alt=\"Header decoration\" />\n            )}\n            <h1>{props.activity.title}</h1>\n            <p dangerouslySetInnerHTML={{ __html: props.activity.description }}></p>\n            <Button variant=\"contained\" color=\"primary\" onClick={props.handleStartActivity}>\n                I'm ready\n                </Button>\n        </div>\n    )\n}\n","import React, { useState } from \"react\";\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link, Button } from '@material-ui/core';\n\nimport './ActivityCarousel.css';\n\n// Import Swiper React components\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, { Navigation, Pagination, A11y } from 'swiper';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport 'swiper/components/scrollbar/scrollbar.scss';\nimport 'swiper/components/pagination/pagination.scss';\n\nSwiperCore.use([Navigation, Pagination, A11y]);\n\nexport default function ActivityCarousel(props) {\n\n    const [activityCompleted, setActivityCompleted] = useState(false)\n    const finishedActivity = () => setActivityCompleted(true)\n\n    return (\n        <div className=\"ActivityCarousel\">\n            <Swiper\n                spaceBetween={50}\n                slidesPerView={1}\n                navigation\n                pagination={{ clickable: true, type: 'progressbar', }}\n                onReachEnd={finishedActivity}\n            >\n                {props.activity.pages.map((page, i) => {\n                    return (\n                        <SwiperSlide key={i}>\n                            {(page.thumbnail.split('.').pop() === 'mp4') ? (\n                                <video className=\"ActivityVideo\" autoPlay muted loop playsInline controls >\n                                    <source src={`/activities/${props.activityId}/${page.thumbnail}`} type=\"video/mp4\" />\n                                </video>\n                            ) : (\n                                <img src={encodeURI('/activities/' + (props.activityId) + '/' + page.thumbnail)} alt=\"Header decoration\" />\n                            )}\n                            \n                            <div className=\"text\">\n                                <h1>{page.title}</h1>\n                                <p dangerouslySetInnerHTML={{ __html: page.description }}></p>\n                            </div>\n                        </SwiperSlide>\n                    )\n                })}\n\n            </Swiper>\n            {activityCompleted ? (\n                <Link component={RouterLink} to={{ pathname: \"/\" }} style={{ textDecoration: 'none' }}>\n                    <Button variant=\"contained\" color=\"primary\">Done</Button>\n                </Link>\n            ) : null\n            }\n        </div >\n    )\n}\n","import React, { useState } from \"react\";\nimport { useParams } from 'react-router-dom';\n\nimport './Activity.css'\n\nimport useSWR from 'swr'\n\nimport { css } from \"@emotion/core\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nimport ActivityIntroduction from './ActivityIntroduction';\nimport ActivityCarousel from './ActivityCarousel';\n\nexport default function Activity() {\n\n    let { activityId } = useParams();\n\n    const [showActivityIntroduction, setShowActivityIntroduction] = useState(true)\n    \n    const startActivity = () => setShowActivityIntroduction(false)\n    \n    const { data } = useSWR(`/activities/api/get/${activityId-1}`)\n\n    const override = css`display: block; margin: 0 auto;`;\n    if (!data) return <BounceLoader color={\"#F19820\"} loading={true} css={override} size={100} />\n\n    return (\n        <div className=\"Activity\">\n            { showActivityIntroduction ?\n                (\n                    <ActivityIntroduction activityId={activityId} activity={data.activity} handleStartActivity={startActivity}/>\n                )\n                :\n                (\n                    <ActivityCarousel activityId={activityId} activity={data.activity}/>\n                )\n            }\n        </div>\n    )\n}","import React from \"react\";\n\nimport './ActivityBubble.css'\n\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@material-ui/core';\n\nexport default function ActivityBubble(props) {\n\n    const getActivityId = () => {\n        return props.activityId + 1;\n    }\n\n    const fullThumbnailPath = '/activities/' + getActivityId() + '/' + props.thumbnail;\n    const thumbnailUrl = \"url('\" + fullThumbnailPath + \"')\";\n\n    return (\n        <Link component={RouterLink}\n            to={{\n                pathname: \"/activity/\" + getActivityId(),\n            }}\n            className=\"ActivityBubble\"\n            style={{ backgroundColor: props.backgroundColour + 'd0', textDecoration: 'none' }}>\n            <div className=\"ActivityDetails\" style={{\n                opacity: props.bubbleSize > 50 ? 1 : 0,\n                transition: \"opacity 0.1s ease\",\n            }}>\n                <div className=\"ActivityThumbnail\" style={{ backgroundImage: thumbnailUrl }}>\n                </div>\n                <h1>{props.title}</h1>\n            </div>\n        </Link>\n    )\n\n}","import React from 'react';\nimport useSWR from 'swr'\n\nimport BubbleUI from \"react-bubble-ui\";\nimport \"react-bubble-ui/dist/index.css\";\n\nimport ActivityBubble from \"./ActivityBubble\";\n\nimport { css } from \"@emotion/core\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nimport \"./Spark.css\";\n\nfunction Spark() {\n\n    const override = css`display: block; margin: 0 auto;`;\n    \n    const options = {\n        size: 165,\n        minSize: 20,\n        gutter: 10,\n        provideProps: true,\n        numCols: 5,\n        fringeWidth: 120,\n        yRadius: 200,\n        xRadius: 100,\n        cornerRadius: 20,\n        showGuides: false,\n        compact: true,\n        gravitation: 5\n    }\n\n    const { data } = useSWR('/activities/api/list')\n\n    if (!data) return <BounceLoader color={\"#F19820\"} loading={true} css={override} size={100} />\n\n    return (\n        <div className=\"Spark\">\n            <BubbleUI options={options} className=\"sparkBubbleUi\">\n                { data.activities.map((activity, i) => {\n                    return (\n                        <ActivityBubble key={i} activityId={i} title={activity.title} thumbnail={activity.thumbnail} backgroundColour={activity.background_colour} />\n                    )\n                })}\n            </BubbleUI>\n        </div>\n    )\n\n}\n\nexport default Spark;","// React imports\nimport React, { useEffect } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n// Authentication imports\nimport { PrivateRoute } from './components/Auth/PrivateRoute';\nimport Login from './components/Auth/Login';\nimport ResetWithToken from './components/Auth/ResetWithToken';\nimport Reset from './components/Auth/Reset';\n\n// App styling\nimport './App.css';\nimport './fonts/font.css';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\n// Navigation components\nimport Navbar from './Navbar/Navbar';\nimport TopBar from './components/TopBar/TopBar';\n\n// Page components\nimport SplashScreen from './components/SplashScreen/SplashScreen';\nimport UserMenu from './components/UserMenu/UserMenu.jsx';\nimport ViewActivitiesComponent from './components/ViewActivities/ViewActivitiesComponent';\nimport Activity from './components/Activity/Activity';\nimport Spark from './components/Spark/Spark';\n\n// Notifications\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nexport const SnackbarContext = React.createContext();\n\n\nexport default function App() {\n\n  const [splashScreen, setSplashScreen] = React.useState(true)\n\n  useEffect(() => {\n    setTimeout(() => {\n      setSplashScreen(false)\n    }, 1500);\n  }, []);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: (useMediaQuery('(prefers-color-scheme: dark)') ? 'dark' : 'light'),\n      primary: {\n        main: '#F19820'\n      },\n      secondary: {\n        main: '#CAE8FF'\n      }\n    },\n    typography: {\n      fontFamily: [\n        'F37 Ginger',\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(',')\n    }\n  });\n\n  // Snackbar\n  const [snackbar, setSnackbar] = React.useState({\n    text: '',\n    severity: '',\n    open: false,\n  });\n  const handleClose = () => {\n    setSnackbar({ open: false });\n  }\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <link rel=\"shortcut icon\" href=\"./favicon.ico\" />\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n\n        <header className=\"App-header\">\n\n          <SnackbarContext.Provider value={{ snackbar, setSnackbar }}>\n\n            <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleClose}>\n              <MuiAlert onClose={handleClose} severity={snackbar.severity}>\n                {snackbar.text}\n              </MuiAlert>\n            </Snackbar>\n\n            {splashScreen ? (<SplashScreen />) : (\n\n              <BrowserRouter>\n\n                <TopBar />\n\n                <div className=\"AppWrapper\">\n\n                  <Switch>\n                    <Route exact path=\"/\"> <ViewActivitiesComponent /> </Route>\n\n                    <Route exact path=\"/activity/:activityId\"> <Activity /> </Route>\n\n                    <Route exact path=\"/spark\"> <Spark /> </Route>\n\n                    <PrivateRoute exact path=\"/user\" component={UserMenu} />\n\n                    <Route exact path=\"/login\" component={Login} />\n\n                    <Route exact path=\"/reset\" component={Reset} />\n\n                    <Route exact path=\"/reset/:token\" component={ResetWithToken} />\n                  </Switch>\n\n                </div>\n\n                <Navbar />\n\n              </BrowserRouter>\n            )}\n\n          </SnackbarContext.Provider>\n        </header>\n      </div>\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\n\nimport { authenticationService } from '../services';\nimport { refreshToken } from '../helpers';\nimport config from '../config';\n\naxios.interceptors.response.use(\n    (response) => {\n      return response\n    },\n    (error) => {\n      return new Promise((resolve) => {\n        const originalRequest = error.config\n        const refreshTokenString = refreshToken()\n        if (error.response && error.response.status === 401 && error.config && !error.config.__isRetryRequest && refreshTokenString) {\n          originalRequest._retry = true\n  \n          const response = fetch(config.authRefresh, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${refreshTokenString}`\n            },\n            body: JSON.stringify({\n              refresh: refreshToken,\n            }),\n          })\n            .then((res) => res.json())\n            .then((data) => {\n              const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n              currentUser['access_token'] = data.access_token;\n              authenticationService.updateUser(currentUser);\n\n              window.location.reload();\n            })\n          resolve(response)\n        }\n  \n        return Promise.reject(error)\n      })\n    },\n  )","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { SWRConfig } from 'swr'\n\nimport './interceptors/axios-interceptor';\nimport { fetcher } from './services';\n\nReactDOM.render(\n\n    <SWRConfig value={{ fetcher }}>\n        <App />\n    </SWRConfig>\n    ,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}